name: 'Terraform Plan'
env:
  terraform_directory: "datarepo"
  terraform_version: "0.12.29"
on:
  pull_request:
    paths:
      - '!old/**'
      - '!.github/**'
      - 'datarepo/**'
jobs:
  terraform_plan:
    strategy:
      matrix:
        environment: [alpha, perf, staging, production]
    if: "!contains( github.event.pull_request.labels.*.name, 'skip-ci')"
    name: "${{ matrix.environment }} Terraform Plan"
    runs-on: ubuntu-latest
    steps:
      - name: "${{ matrix.environment }} Checkout"
        uses: actions/checkout@master

      - name: "${{ matrix.environment }} Terraform Format"
        uses: hashicorp/terraform-github-actions@v0.8.0
        with:
          tf_actions_version: ${{ env.terraform_version }}
          tf_actions_subcommand: "fmt"
          tf_actions_fmt_write: "true"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "${{ matrix.environment }} set VAULT_TOKEN"
        id: token
        run: |
          VAULT_TOKEN=$(curl \
            --request POST \
            --data '{"role_id":"'"${ROLE_ID}"'","secret_id":"'"${SECRET_ID}"'"}' \
            ${VAULT_ADDR}/v1/auth/approle/login | jq -r .auth.client_token)
          echo ::add-mask::${VAULT_TOKEN}
          echo ::set-env name=VAULT_TOKEN::${VAULT_TOKEN}
          echo ::set-output name=vault_token::${VAULT_TOKEN}
        env:
          ROLE_ID: ${{ secrets.ROLE_ID }}
          SECRET_ID: ${{ secrets.SECRET_ID }}
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}

      - name: "${{ matrix.environment }} consul-template render templates for terraform"
        uses: broadinstitute/github-action-consul-template@master
        with:
          vault-address: ${{ secrets.VAULT_ADDR }}
          vault-token: ${{ steps.token.outputs.vault_token }}
          environment: ${{ matrix.environment }}
          env_path: "datarepo"

      - name: "${{ matrix.environment }} Terraform Init"
        uses: hashicorp/terraform-github-actions@v0.8.0
        with:
          tf_actions_version: ${{ env.terraform_version }}
          tf_actions_subcommand: "init -backend-config=tfvars/${{ matrix.environment }}.tfvars"
          tf_actions_working_dir: "${{ env.terraform_directory }}/${{ matrix.environment }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "${{ matrix.environment }} Terraform Validate"
        uses: hashicorp/terraform-github-actions@v0.8.0
        with:
          tf_actions_version: ${{ env.terraform_version }}
          tf_actions_subcommand: "validate"
          tf_actions_working_dir: "${{ env.terraform_directory }}/${{ matrix.environment }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "${{ matrix.environment }} Terraform Plan"
        uses: hashicorp/terraform-github-actions@v0.8.0
        with:
          tf_actions_version: ${{ env.terraform_version }}
          tf_actions_subcommand: "plan -var-file=tfvars/${{ matrix.environment }}.tfvars"
          tf_actions_working_dir: "${{ env.terraform_directory }}/${{ matrix.environment }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
