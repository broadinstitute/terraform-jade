name: 'Terraform Apply'
env:
  terraform_directory: "./datarepo"
  terraform_version: "0.13.5"
on:
  push:
    branches:
      - master
    paths:
      - '!old/**'
      - '!.github/**'
      - '.github/workflows/terraformMergeApply.yml'
      - 'datarepo/**'
jobs:
  terraform_apply:
    strategy:
      matrix:
        environment: [alpha, perf, staging, production]
    if: "!contains( github.event.pull_request.labels.*.name, 'skip-ci')"
    name: '${{ matrix.environment }} Terraform Apply'
    runs-on: ubuntu-latest
    steps:
      - name: "${{ matrix.environment }} Checkout"
        uses: actions/checkout@v2

      - name: install terrform
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: ${{ env.terraform_version }}

      - name: "${{ matrix.environment }} set VAULT_TOKEN"
        id: token
        run: |
          VAULT_TOKEN=$(curl \
            --request POST \
            --data '{"role_id":"'"${ROLE_ID}"'","secret_id":"'"${SECRET_ID}"'"}' \
            ${VAULT_ADDR}/v1/auth/approle/login | jq -r .auth.client_token)
          echo ::add-mask::${VAULT_TOKEN}
          echo "{VAULT_TOKEN}=$(echo ${VAULT_TOKEN})" >> $GITHUB_ENV
          #echo ::set-env name=VAULT_TOKEN::${VAULT_TOKEN}
          echo ::set-output name=vault_token::${VAULT_TOKEN}
        env:
          ROLE_ID: ${{ secrets.ROLE_ID }}
          SECRET_ID: ${{ secrets.SECRET_ID }}
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}

      - name: "${{ matrix.environment }} consul-template render templates for terraform"
        uses: broadinstitute/github-action-consul-template@master
        with:
          vault-address: ${{ secrets.VAULT_ADDR }}
          vault-token: ${{ steps.token.outputs.vault_token }}
          environment: ${{ matrix.environment }}
          env_path: "datarepo"

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: "${{ matrix.environment }} - Set backend config bucket"
        run: |
          ls -al
          echo 'bucket<<EOF' >> $GITHUB_ENV
          grep google_project ${{ matrix.environment }}.tfvars | awk '{print $3}' >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
        working-directory: ${{ env.terraform_directory }}/tfvars

      - name: "${{ matrix.environment }} - Terraform Init"
        id: init
        run: terraform init -backend-config=bucket=${{ env.bucket }}
        working-directory: ${{ env.terraform_directory }}

      - name: "${{ matrix.environment }} - Terraform Validate"
        id: validate
        run: terraform validate -no-color
        continue-on-error: true

      - name: "${{ matrix.environment }} - Terraform Plan"
        id: plan
        run: terraform plan -var-file=tfvars/${{ matrix.environment }}.tfvars -no-color
        working-directory: ${{ env.terraform_directory }}
        continue-on-error: true

      - name: Outputs
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### ${{ matrix.environment }} - Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### ${{ matrix.environment }} - Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### ${{ matrix.environment }} - Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>${{ matrix.environment }} - Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.terraform_directory }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: "${{ matrix.environment }} Slack job status"
        if: always()
        uses: broadinstitute/action-slack@v2
        with:
          status: ${{ job.status }}
          author_name: Terraform deploy
          only_mention_fail: smark,fboulnois
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
